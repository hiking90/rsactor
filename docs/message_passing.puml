@startuml Message Passing
title Message Passing (tell and ask)

actor Client
participant "ActorRef" as ActorRef_obj
participant "MailboxChannel (mpsc)" as MailboxChannel
participant "run_actor_lifecycle()" as Runtime_obj
participant "MessageHandler::handle()" as DynMsgHandler
participant "UserActor::handle(msg)" as UserHandler
participant "oneshot::channel" as OneshotChannel

box "Actor Task" #LightBlue
    participant Runtime_obj
    participant DynMsgHandler
    participant UserHandler
end box

== Tell Operation ==
Client -> ActorRef_obj: actor_ref.tell(MyMessage).await
activate ActorRef_obj
ActorRef_obj -> ActorRef_obj: Wraps MyMessage in MailboxMessage::Envelope (reply_channel = None)
ActorRef_obj -> MailboxChannel: sender.send(envelope).await
deactivate ActorRef_obj
Client <-- ActorRef_obj: Returns Result<()>

MailboxChannel -> Runtime_obj: receiver.recv() gets Envelope
activate Runtime_obj
Runtime_obj -> DynMsgHandler: actor.handle(payload, &actor_ref).await
activate DynMsgHandler
DynMsgHandler -> UserHandler: Calls specific message handler for MyMessage
activate UserHandler
UserHandler --> DynMsgHandler: Returns Reply (e.g., ())
deactivate UserHandler
DynMsgHandler --> Runtime_obj: Returns Ok(Boxed Reply) or Err(crate::Error)
deactivate DynMsgHandler
note right of Runtime_obj: For tell, reply is discarded (no reply_channel)
deactivate Runtime_obj

== Ask Operation ==
Client -> ActorRef_obj: actor_ref.ask(MyQuery).await
activate ActorRef_obj
ActorRef_obj -> OneshotChannel: Creates (reply_tx, reply_rx)
ActorRef_obj -> ActorRef_obj: Wraps MyQuery in MailboxMessage::Envelope (with reply_tx)
ActorRef_obj -> MailboxChannel: sender.send(envelope).await
ActorRef_obj -> OneshotChannel: reply_rx.await (waits for reply)
activate OneshotChannel

MailboxChannel -> Runtime_obj: receiver.recv() gets Envelope
activate Runtime_obj
Runtime_obj -> DynMsgHandler: actor.handle(payload, &actor_ref).await
activate DynMsgHandler
DynMsgHandler -> UserHandler: Calls specific message handler for MyQuery
activate UserHandler
UserHandler --> DynMsgHandler: Returns QueryReply
deactivate UserHandler
DynMsgHandler --> Runtime_obj: Returns Ok(Boxed QueryReply) or Err(crate::Error)
deactivate DynMsgHandler

alt Success
  Runtime_obj -> OneshotChannel: reply_tx.send(Ok(Boxed QueryReply))
else Error
  Runtime_obj -> OneshotChannel: reply_tx.send(Err(crate::Error))
end
deactivate Runtime_obj
OneshotChannel --> ActorRef_obj: Receives reply
deactivate OneshotChannel
ActorRef_obj -> ActorRef_obj: Downcasts reply to QueryReply
ActorRef_obj --> Client: Returns Result<QueryReply>
deactivate ActorRef_obj

@enduml