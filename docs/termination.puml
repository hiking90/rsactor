@startuml Actor Termination
title Actor Termination (stop, kill, and on_run completion)

actor Client
participant "ActorRef" as ActorRef_obj
participant "MailboxChannel (mpsc)" as MailboxChannel
participant "TerminateChannel (mpsc)" as TerminateChannel
participant "run_actor_lifecycle()" as Lifecycle
participant "Actor::on_run()" as on_run_method
participant "JoinHandle" as JoinHandle_obj

box "Actor Task" #LightCoral
    participant Lifecycle
    participant on_run_method
end box

== Stop Operation (Graceful) ==
Client -> ActorRef_obj: actor_ref.stop().await
activate ActorRef_obj
ActorRef_obj -> MailboxChannel: sender.send(MailboxMessage::StopGracefully).await
deactivate ActorRef_obj
note right of Client: Client awaits JoinHandle or stop() completion

MailboxChannel -> Lifecycle: receiver.recv() gets StopGracefully
activate Lifecycle
Lifecycle -> Lifecycle: Sets was_killed = false
Lifecycle -> Lifecycle: Breaks message loop
Lifecycle -> MailboxChannel: receiver.close()
Lifecycle -> TerminateChannel: terminate_receiver.close()
Lifecycle --> JoinHandle_obj: Task finishes, JoinHandle resolves with ActorResult::Completed { killed: false, .. }
deactivate Lifecycle

== Kill Operation (Immediate) ==
Client -> ActorRef_obj: actor_ref.kill()
activate ActorRef_obj
ActorRef_obj -> TerminateChannel: terminate_sender.try_send(ControlSignal::Terminate)
deactivate ActorRef_obj

TerminateChannel -> Lifecycle: terminate_receiver.recv() gets Terminate (prioritized via biased select!)
activate Lifecycle
Lifecycle -> Lifecycle: Sets was_killed = true
Lifecycle -> Lifecycle: Breaks message loop immediately
Lifecycle -> MailboxChannel: receiver.close()
Lifecycle -> TerminateChannel: terminate_receiver.close()
Lifecycle --> JoinHandle_obj: Task finishes, JoinHandle resolves with ActorResult::Completed { killed: true, .. }
deactivate Lifecycle

== Termination via on_run ==
Lifecycle -> on_run_method: Calls actor.on_run(actor_ref)
activate on_run_method
alt on_run returns Ok(false) (Normal stop)
    on_run_method --> Lifecycle: Returns Ok(false)
    Lifecycle -> Lifecycle: Sets was_killed = false
    Lifecycle -> Lifecycle: Breaks message loop (or stops further on_run calls)
    Lifecycle --> JoinHandle_obj: Task finishes, JoinHandle resolves with ActorResult::Completed { killed: false, .. }
else on_run returns Err(error) (Runtime error)
    on_run_method --> Lifecycle: Returns Err(cause)
    Lifecycle -> Lifecycle: Sets was_killed = false (or true if error implies kill)
    Lifecycle -> Lifecycle: Breaks message loop (or stops further on_run calls)
    Lifecycle --> JoinHandle_obj: Task finishes, JoinHandle resolves with ActorResult::RuntimeFailed { cause, .. }
else on_run returns Ok(true) (Continue)
    on_run_method --> Lifecycle: Returns Ok(true)
    note right of Lifecycle: Lifecycle may call on_run again
end
deactivate on_run_method
deactivate Lifecycle

@enduml